Java开发设计——七大原则
开闭原则（Open Closed Principle，OCP）
含义
开闭原则的含义是：当应用的需求改变时，在不修改软件实体的源代码或者二进制代码的前提下，可以扩展模块的功能，使其满足新的需求。

作用
开闭原则是面向对象程序设计的终极目标，它使软件实体拥有一定的适应性和灵活性的同时具备稳定性和延续性。具体来说，其作用如下：

◆　对软件测试的影响：软件遵守开闭原则的话，软件测试时只需要对扩展的代码进行测试就可以了，因为原有的测试代码仍然能够正常运行。

◆　可以提高代码的可复用性：粒度越小，被复用的可能性就越大；在面向对象的程序设计中，根据原子和抽象编程可以提高代码的可复用性。

◆　可以提高软件的可维护性：遵守开闭原则的软件，其稳定性高和延续性强，从而易于扩展和维护。

实现方式
可以通过“抽象约束、封装变化”来实现开闭原则，即通过接口或者抽象类为软件实体定义一个相对稳定的抽象层，而将相同的可变因素封装在相同的具体实现类中。

因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。

里氏替换原则（Liskov Substitution Principle，LSP）
含义
继承必须确保超类所拥有的性质在子类中仍然成立。

里氏替换原则主要阐述了有关继承的一些原则，也就是什么时候应该使用继承，什么时候不应该使用继承，以及其中蕴含的原理。里氏替换原是继承复用的基础，它反映了基类与子类之间的关系，是对开闭原则的补充，是对实现抽象化的具体步骤的规范。

作用
◆　里氏替换原则是实现开闭原则的重要方式之一。

◆　它克服了继承中重写父类造成的可复用性变差的缺点。

◆　它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。

实现方式
里氏替换原则通俗来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。

如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。

如果程序违背了里氏替换原则，则继承类的对象在基类出现的地方会出现运行错误。这时其修正方法是：取消原来的继承关系，重新设计它们之间的关系。

依赖倒置原则（Dependence Inversion Principle，DIP）
含义
依赖倒置原则的原始定义为：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。其核心思想是：要面向接口编程，不要面向实现编程。

依赖倒置原则是实现开闭原则的重要途径之一，它降低了客户与实现模块之间的耦合。

作用
◆　依赖倒置原则可以降低类间的耦合性。

◆　依赖倒置原则可以提高系统的稳定性。

◆　依赖倒置原则可以减少并行开发引起的风险。

◆　依赖倒置原则可以提高代码的可读性和可维护性。

实现方式
依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性，所以我们在实际编程中只要遵循以下4点，就能在项目中满足这个规则：

◆　每个类尽量提供接口或抽象类，或者两者都具备。

◆　变量的声明类型尽量是接口或者是抽象类。

◆　任何类都不应该从具体类派生。

◆　使用继承时尽量遵循里氏替换原则。

单一职责原则（Single Responsibility Principle，SRP）
含义
单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分。

优点
单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性。如果遵循单一职责原则将有以下优点：

◆　降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。

◆　提高类的可读性。复杂性降低，自然其可读性会提高。

◆　提高系统的可维护性。可读性提高，那自然更容易维护了。

◆　变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，可以显著降低对其他功能的影响。

实现方式
单一职责原则是最简单但又最难运用的原则，需要设计人员发现类的不同职责并将其分离，再封装到不同的类或模块中，而发现类的多重职责需要设计人员具有较强的分析设计能力和相关重构经验。

接口隔离原则（Interface Segregation Principle，ISP）
含义
以上两个定义的含义是：要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。

优点
接口隔离原则是为了约束接口、降低类对接口的依赖性，遵循接口隔离原则有以下5个优点：

◆　将臃肿庞大的接口分解为多个粒度小的接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。

◆　接口隔离提高了系统的内聚性，减少了对外交互，降低了系统的耦合性。

◆　如果接口的粒度大小定义合理，能够保证系统的稳定性；但是，如果定义过小，则会造成接口数量过多，使设计复杂化；如果定义太大，灵活性降低，无法提供定制服务，给整体项目带来无法预料的风险。

◆　使用多个专门的接口还能够体现对象的层次，因为可以通过接口的继承，实现对总接口的定义。

◆　能减少项目工程中的代码冗余。过大的大接口里面通常放置许多不用的方法，当实现这个接口的时候，被迫设计冗余的代码。

实现方式
在具体应用接口隔离原则时，应该根据以下几个规则来衡量：

◆　接口尽量小，但是要有限度。一个接口只服务于一个子模块或业务逻辑。

◆　为依赖接口的类定制服务。只提供调用者需要的方法，屏蔽不需要的方法。

◆　了解环境，拒绝盲从。每个项目或产品都有选定的环境因素，环境不同，接口拆分的标准就不同深入了解业务逻辑。

◆　提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。

迪米特法则（Law of Demeter，LoD）
含义
迪米特法则的定义是：只与你的直接朋友交谈，不跟“陌生人”说话。其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。

迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。

优点
迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点：

◆　降低了类之间的耦合度，提高了模块的相对独立性。

◆　由于亲合度降低，从而提高了类的可复用率和系统的扩展性。

但是，过度使用迪米特法则会使系统产生大量的中介类，从而增加系统的复杂性，使模块之间的通信效率降低。所以，在釆用迪米特法则时需要反复权衡，确保高内聚和低耦合的同时，保证系统的结构清晰。

实现方式
从迪米特法则的定义和特点可知，它强调以下2点：

◆　从依赖者的角度来说，只依赖应该依赖的对象。

◆　从被依赖者的角度说，只暴露应该暴露的方法。

所以，在运用迪米特法则时要注意以下6点：

◆　在类的划分上，应该创建弱耦合的类。类与类之间的耦合越弱，就越有利于实现可复用的目标。

◆　在类的结构设计上，尽量降低类成员的访问权限。

◆　在类的设计上，优先考虑将一个类设置成不变类。

◆　在对其他类的引用上，将引用其他对象的次数降到最低。

◆　不暴露类的属性成员，而应该提供相应的访问器（set方法和get 方法）。

◆　谨慎使用序列化（Serializable）功能。

合成复用原则（Composite Reuse Principle，CRP）
含义
它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。

作用
通常类的复用分为继承复用和合成复用两种，继承复用虽然有简单和易实现的优点，但它也存在以下缺点：

◆　继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。

◆　子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。

◆　它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。

采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：

◆　它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。

◆　新旧类之间的耦合度低。这种复用所需的依赖较少，新对象存取成分对象的唯一方法是通过成分对象的接口。

◆　复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。

实现方式
合成复用原则是通过将已有的对象纳入新对象中，作为新对象的成员对象来实现的，新对象可以调用已有对象的功能，从而达到复用。

总结
这7种设计原则是软件设计模式必须尽量遵循的原则，各种原则要求的侧重点不同：

◆　开闭原则是总纲，它告诉我们要对扩展开放，对修改关闭。

◆　里氏替换原则告诉我们不要破坏继承体系。

◆　依赖倒置原则告诉我们要面向接口编程。

◆　单一职责原则告诉我们实现类要职责单一。

◆　接口隔离原则告诉我们在设计接口的时候要精简单一。

◆　迪米特法则告诉我们要降低耦合度。

◆　合成复用原则告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。